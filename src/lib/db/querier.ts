// Code generated by sqlc-gen-ts-d1. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
//   sqlc-gen-ts-d1 v0.0.0-a@254c24db5bcb2e1e16559e7f8498d7fa673ada31

import { D1Database, D1Result } from "@cloudflare/workers-types/experimental";

const getBlockQuery = `-- name: GetBlock :one
SELECT
  id, blocker_id, blocking_id
FROM
  block_relation
WHERE
  blocker_id = ?1
  AND blocking_id = ?2`;

export type GetBlockParams = {
  blockerId: string;
  blockingId: string;
};

export type GetBlockRow = {
  id: number;
  blockerId: string;
  blockingId: string;
};

type RawGetBlockRow = {
  id: number;
  blocker_id: string;
  blocking_id: string;
};

export async function getBlock(
  d1: D1Database,
  args: GetBlockParams,
): Promise<GetBlockRow | null> {
  return await d1
    .prepare(getBlockQuery)
    .bind(args.blockerId, args.blockingId)
    .first<RawGetBlockRow | null>()
    .then((raw: RawGetBlockRow | null) =>
      raw
        ? {
            id: raw.id,
            blockerId: raw.blocker_id,
            blockingId: raw.blocking_id,
          }
        : null,
    );
}

const getUserBlockersQuery = `-- name: GetUserBlockers :many
SELECT
  u.id,
  u.screen_name,
  u.display_name,
  u.bio,
  u.is_active,
  u.is_protected,
  u.avatar_url
FROM
  user u
  JOIN block_relation f ON u.id = f.blocker_id
WHERE
  f.blocker_id = ?1
LIMIT
  50
OFFSET
  ?2`;

export type GetUserBlockersParams = {
  id: string;
  offset: number;
};

export type GetUserBlockersRow = {
  id: string;
  screenName: string;
  displayName: string;
  bio: string | null;
  isActive: number | string;
  isProtected: number | string;
  avatarUrl: number | string | null;
};

type RawGetUserBlockersRow = {
  id: string;
  screen_name: string;
  display_name: string;
  bio: string | null;
  is_active: number | string;
  is_protected: number | string;
  avatar_url: number | string | null;
};

export async function getUserBlockers(
  d1: D1Database,
  args: GetUserBlockersParams,
): Promise<D1Result<GetUserBlockersRow>> {
  return await d1
    .prepare(getUserBlockersQuery)
    .bind(args.id, args.offset)
    .all<RawGetUserBlockersRow>()
    .then((r: D1Result<RawGetUserBlockersRow>) => {
      return {
        ...r,
        results: r.results.map((raw: RawGetUserBlockersRow) => {
          return {
            id: raw.id,
            screenName: raw.screen_name,
            displayName: raw.display_name,
            bio: raw.bio,
            isActive: raw.is_active,
            isProtected: raw.is_protected,
            avatarUrl: raw.avatar_url,
          };
        }),
      };
    });
}

const getUserBlocksQuery = `-- name: GetUserBlocks :many
SELECT
  u.id,
  u.screen_name,
  u.display_name,
  u.bio,
  u.is_active,
  u.is_protected,
  u.avatar_url
FROM
  user u
  JOIN block_relation f ON u.id = f.blocking_id
WHERE
  f.blocking_id = ?1
LIMIT
  50
OFFSET
  ?2`;

export type GetUserBlocksParams = {
  id: string;
  offset: number;
};

export type GetUserBlocksRow = {
  id: string;
  screenName: string;
  displayName: string;
  bio: string | null;
  isActive: number | string;
  isProtected: number | string;
  avatarUrl: number | string | null;
};

type RawGetUserBlocksRow = {
  id: string;
  screen_name: string;
  display_name: string;
  bio: string | null;
  is_active: number | string;
  is_protected: number | string;
  avatar_url: number | string | null;
};

export async function getUserBlocks(
  d1: D1Database,
  args: GetUserBlocksParams,
): Promise<D1Result<GetUserBlocksRow>> {
  return await d1
    .prepare(getUserBlocksQuery)
    .bind(args.id, args.offset)
    .all<RawGetUserBlocksRow>()
    .then((r: D1Result<RawGetUserBlocksRow>) => {
      return {
        ...r,
        results: r.results.map((raw: RawGetUserBlocksRow) => {
          return {
            id: raw.id,
            screenName: raw.screen_name,
            displayName: raw.display_name,
            bio: raw.bio,
            isActive: raw.is_active,
            isProtected: raw.is_protected,
            avatarUrl: raw.avatar_url,
          };
        }),
      };
    });
}

const createBlockQuery = `-- name: CreateBlock :exec
INSERT INTO
  block_relation (blocker_id, blocking_id)
VALUES
  (?1, ?2)`;

export type CreateBlockParams = {
  blockerId: string;
  blockingId: string;
};

export async function createBlock(
  d1: D1Database,
  args: CreateBlockParams,
): Promise<D1Result> {
  return await d1
    .prepare(createBlockQuery)
    .bind(args.blockerId, args.blockingId)
    .run();
}

const deleteBlockQuery = `-- name: DeleteBlock :exec
DELETE FROM block_relation
WHERE
  blocker_id = ?1
  AND blocking_id = ?2`;

export type DeleteBlockParams = {
  blockerId: string;
  blockingId: string;
};

export async function deleteBlock(
  d1: D1Database,
  args: DeleteBlockParams,
): Promise<D1Result> {
  return await d1
    .prepare(deleteBlockQuery)
    .bind(args.blockerId, args.blockingId)
    .run();
}

const getFollowQuery = `-- name: GetFollow :one
SELECT
  id, follower_id, following_id
FROM
  follow_relation
WHERE
  follower_id = ?1
  AND following_id = ?2`;

export type GetFollowParams = {
  followerId: string;
  followingId: string;
};

export type GetFollowRow = {
  id: number;
  followerId: string;
  followingId: string;
};

type RawGetFollowRow = {
  id: number;
  follower_id: string;
  following_id: string;
};

export async function getFollow(
  d1: D1Database,
  args: GetFollowParams,
): Promise<GetFollowRow | null> {
  return await d1
    .prepare(getFollowQuery)
    .bind(args.followerId, args.followingId)
    .first<RawGetFollowRow | null>()
    .then((raw: RawGetFollowRow | null) =>
      raw
        ? {
            id: raw.id,
            followerId: raw.follower_id,
            followingId: raw.following_id,
          }
        : null,
    );
}

const getUserFollowersQuery = `-- name: GetUserFollowers :many
SELECT
  u.id,
  u.screen_name,
  u.display_name,
  u.bio,
  u.is_active,
  u.is_protected,
  u.avatar_url
FROM
  user u
  JOIN follow_relation f ON u.id = f.follower_id
WHERE
  f.follower_id = ?1
LIMIT
  50
OFFSET
  ?2`;

export type GetUserFollowersParams = {
  id: string;
  offset: number;
};

export type GetUserFollowersRow = {
  id: string;
  screenName: string;
  displayName: string;
  bio: string | null;
  isActive: number | string;
  isProtected: number | string;
  avatarUrl: number | string | null;
};

type RawGetUserFollowersRow = {
  id: string;
  screen_name: string;
  display_name: string;
  bio: string | null;
  is_active: number | string;
  is_protected: number | string;
  avatar_url: number | string | null;
};

export async function getUserFollowers(
  d1: D1Database,
  args: GetUserFollowersParams,
): Promise<D1Result<GetUserFollowersRow>> {
  return await d1
    .prepare(getUserFollowersQuery)
    .bind(args.id, args.offset)
    .all<RawGetUserFollowersRow>()
    .then((r: D1Result<RawGetUserFollowersRow>) => {
      return {
        ...r,
        results: r.results.map((raw: RawGetUserFollowersRow) => {
          return {
            id: raw.id,
            screenName: raw.screen_name,
            displayName: raw.display_name,
            bio: raw.bio,
            isActive: raw.is_active,
            isProtected: raw.is_protected,
            avatarUrl: raw.avatar_url,
          };
        }),
      };
    });
}

const getUserFollowsQuery = `-- name: GetUserFollows :many
SELECT
  u.id,
  u.screen_name,
  u.display_name,
  u.bio,
  u.is_active,
  u.is_protected,
  u.avatar_url
FROM
  user u
  JOIN follow_relation f ON u.id = f.following_id
WHERE
  f.following_id = ?1
LIMIT
  50
OFFSET
  ?2`;

export type GetUserFollowsParams = {
  id: string;
  offset: number;
};

export type GetUserFollowsRow = {
  id: string;
  screenName: string;
  displayName: string;
  bio: string | null;
  isActive: number | string;
  isProtected: number | string;
  avatarUrl: number | string | null;
};

type RawGetUserFollowsRow = {
  id: string;
  screen_name: string;
  display_name: string;
  bio: string | null;
  is_active: number | string;
  is_protected: number | string;
  avatar_url: number | string | null;
};

export async function getUserFollows(
  d1: D1Database,
  args: GetUserFollowsParams,
): Promise<D1Result<GetUserFollowsRow>> {
  return await d1
    .prepare(getUserFollowsQuery)
    .bind(args.id, args.offset)
    .all<RawGetUserFollowsRow>()
    .then((r: D1Result<RawGetUserFollowsRow>) => {
      return {
        ...r,
        results: r.results.map((raw: RawGetUserFollowsRow) => {
          return {
            id: raw.id,
            screenName: raw.screen_name,
            displayName: raw.display_name,
            bio: raw.bio,
            isActive: raw.is_active,
            isProtected: raw.is_protected,
            avatarUrl: raw.avatar_url,
          };
        }),
      };
    });
}

const createFollowQuery = `-- name: CreateFollow :exec
INSERT INTO
  follow_relation (follower_id, following_id)
VALUES
  (?1, ?2)`;

export type CreateFollowParams = {
  followerId: string;
  followingId: string;
};

export async function createFollow(
  d1: D1Database,
  args: CreateFollowParams,
): Promise<D1Result> {
  return await d1
    .prepare(createFollowQuery)
    .bind(args.followerId, args.followingId)
    .run();
}

const deleteFollowQuery = `-- name: DeleteFollow :exec
DELETE FROM follow_relation
WHERE
  follower_id = ?1
  AND following_id = ?2`;

export type DeleteFollowParams = {
  followerId: string;
  followingId: string;
};

export async function deleteFollow(
  d1: D1Database,
  args: DeleteFollowParams,
): Promise<D1Result> {
  return await d1
    .prepare(deleteFollowQuery)
    .bind(args.followerId, args.followingId)
    .run();
}

const getPostQuery = `-- name: GetPost :one
SELECT
  id, author_id, reference_id, content
FROM
  post
WHERE
  id = ?1`;

export type GetPostParams = {
  id: string;
};

export type GetPostRow = {
  id: string;
  authorId: string;
  referenceId: string | null;
  content: string;
};

type RawGetPostRow = {
  id: string;
  author_id: string;
  reference_id: string | null;
  content: string;
};

export async function getPost(
  d1: D1Database,
  args: GetPostParams,
): Promise<GetPostRow | null> {
  return await d1
    .prepare(getPostQuery)
    .bind(args.id)
    .first<RawGetPostRow | null>()
    .then((raw: RawGetPostRow | null) =>
      raw
        ? {
            id: raw.id,
            authorId: raw.author_id,
            referenceId: raw.reference_id,
            content: raw.content,
          }
        : null,
    );
}

const getPostsByAuthorIdQuery = `-- name: GetPostsByAuthorId :many
SELECT
  id, author_id, reference_id, content
FROM
  post
WHERE
  author_id = ?1`;

export type GetPostsByAuthorIdParams = {
  authorId: string;
};

export type GetPostsByAuthorIdRow = {
  id: string;
  authorId: string;
  referenceId: string | null;
  content: string;
};

type RawGetPostsByAuthorIdRow = {
  id: string;
  author_id: string;
  reference_id: string | null;
  content: string;
};

export async function getPostsByAuthorId(
  d1: D1Database,
  args: GetPostsByAuthorIdParams,
): Promise<D1Result<GetPostsByAuthorIdRow>> {
  return await d1
    .prepare(getPostsByAuthorIdQuery)
    .bind(args.authorId)
    .all<RawGetPostsByAuthorIdRow>()
    .then((r: D1Result<RawGetPostsByAuthorIdRow>) => {
      return {
        ...r,
        results: r.results.map((raw: RawGetPostsByAuthorIdRow) => {
          return {
            id: raw.id,
            authorId: raw.author_id,
            referenceId: raw.reference_id,
            content: raw.content,
          };
        }),
      };
    });
}

const getPostsByReferenceIdQuery = `-- name: GetPostsByReferenceId :many
SELECT
  id, author_id, reference_id, content
FROM
  post
WHERE
  reference_id = ?1`;

export type GetPostsByReferenceIdParams = {
  id: string | null;
};

export type GetPostsByReferenceIdRow = {
  id: string;
  authorId: string;
  referenceId: string | null;
  content: string;
};

type RawGetPostsByReferenceIdRow = {
  id: string;
  author_id: string;
  reference_id: string | null;
  content: string;
};

export async function getPostsByReferenceId(
  d1: D1Database,
  args: GetPostsByReferenceIdParams,
): Promise<D1Result<GetPostsByReferenceIdRow>> {
  return await d1
    .prepare(getPostsByReferenceIdQuery)
    .bind(args.id)
    .all<RawGetPostsByReferenceIdRow>()
    .then((r: D1Result<RawGetPostsByReferenceIdRow>) => {
      return {
        ...r,
        results: r.results.map((raw: RawGetPostsByReferenceIdRow) => {
          return {
            id: raw.id,
            authorId: raw.author_id,
            referenceId: raw.reference_id,
            content: raw.content,
          };
        }),
      };
    });
}

const getPostsByFollowsQuery = `-- name: GetPostsByFollows :many
SELECT
  p.id,
  p.author_id,
  p.reference_id,
  p.content
FROM
  post p
  JOIN follow_relation f ON p.author_id = f.following_id
WHERE
  f.follower_id = ?1
ORDER BY
  p.id DESC
LIMIT
  50`;

export type GetPostsByFollowsParams = {
  id: string;
};

export type GetPostsByFollowsRow = {
  id: string;
  authorId: string;
  referenceId: string | null;
  content: string;
};

type RawGetPostsByFollowsRow = {
  id: string;
  author_id: string;
  reference_id: string | null;
  content: string;
};

export async function getPostsByFollows(
  d1: D1Database,
  args: GetPostsByFollowsParams,
): Promise<D1Result<GetPostsByFollowsRow>> {
  return await d1
    .prepare(getPostsByFollowsQuery)
    .bind(args.id)
    .all<RawGetPostsByFollowsRow>()
    .then((r: D1Result<RawGetPostsByFollowsRow>) => {
      return {
        ...r,
        results: r.results.map((raw: RawGetPostsByFollowsRow) => {
          return {
            id: raw.id,
            authorId: raw.author_id,
            referenceId: raw.reference_id,
            content: raw.content,
          };
        }),
      };
    });
}

const createPostQuery = `-- name: CreatePost :exec
INSERT INTO
  post (id, author_id, reference_id, content)
VALUES
  (?1, ?2, ?3, ?4)`;

export type CreatePostParams = {
  id: string;
  authorId: string;
  referenceId: string | null;
  content: string;
};

export async function createPost(
  d1: D1Database,
  args: CreatePostParams,
): Promise<D1Result> {
  return await d1
    .prepare(createPostQuery)
    .bind(args.id, args.authorId, args.referenceId, args.content)
    .run();
}

const deletePostQuery = `-- name: DeletePost :exec
DELETE FROM post
WHERE
  id = ?1`;

export type DeletePostParams = {
  id: string;
};

export async function deletePost(
  d1: D1Database,
  args: DeletePostParams,
): Promise<D1Result> {
  return await d1.prepare(deletePostQuery).bind(args.id).run();
}

const getTimelineQuery = `-- name: GetTimeline :many
SELECT
  p.id, p.author_id, p.reference_id, p.content
FROM
  post p
  INNER JOIN user u ON p.author_id = u.id
  LEFT JOIN block_relation b ON u.id = b.blocking_id
  LEFT JOIN follow_relation f ON u.id = f.following_id
WHERE
  f.follower_id = ?1
  AND (
    b.blocker_id IS NULL
    OR b.blocker_id != ?1
  )
ORDER BY
  p.id DESC
LIMIT
  50`;

export type GetTimelineParams = {
  userId: string;
};

export type GetTimelineRow = {
  id: string;
  authorId: string;
  referenceId: string | null;
  content: string;
};

type RawGetTimelineRow = {
  id: string;
  author_id: string;
  reference_id: string | null;
  content: string;
};

export async function getTimeline(
  d1: D1Database,
  args: GetTimelineParams,
): Promise<D1Result<GetTimelineRow>> {
  return await d1
    .prepare(getTimelineQuery)
    .bind(args.userId)
    .all<RawGetTimelineRow>()
    .then((r: D1Result<RawGetTimelineRow>) => {
      return {
        ...r,
        results: r.results.map((raw: RawGetTimelineRow) => {
          return {
            id: raw.id,
            authorId: raw.author_id,
            referenceId: raw.reference_id,
            content: raw.content,
          };
        }),
      };
    });
}

const getUserUnsafeQuery = `-- name: GetUserUnsafe :one
SELECT
  id, screen_name, display_name, password_hashed, is_active, is_protected, bio, avatar_url
FROM
  user
WHERE
  id = ?1`;

export type GetUserUnsafeParams = {
  id: string;
};

export type GetUserUnsafeRow = {
  id: string;
  screenName: string;
  displayName: string;
  passwordHashed: string;
  isActive: number | string;
  isProtected: number | string;
  bio: string | null;
  avatarUrl: number | string | null;
};

type RawGetUserUnsafeRow = {
  id: string;
  screen_name: string;
  display_name: string;
  password_hashed: string;
  is_active: number | string;
  is_protected: number | string;
  bio: string | null;
  avatar_url: number | string | null;
};

export async function getUserUnsafe(
  d1: D1Database,
  args: GetUserUnsafeParams,
): Promise<GetUserUnsafeRow | null> {
  return await d1
    .prepare(getUserUnsafeQuery)
    .bind(args.id)
    .first<RawGetUserUnsafeRow | null>()
    .then((raw: RawGetUserUnsafeRow | null) =>
      raw
        ? {
            id: raw.id,
            screenName: raw.screen_name,
            displayName: raw.display_name,
            passwordHashed: raw.password_hashed,
            isActive: raw.is_active,
            isProtected: raw.is_protected,
            bio: raw.bio,
            avatarUrl: raw.avatar_url,
          }
        : null,
    );
}

const getUserQuery = `-- name: GetUser :one
SELECT
  user.id,
  user.screen_name,
  user.display_name,
  user.bio,
  user.is_active,
  user.is_protected,
  user.avatar_url
FROM
  user
WHERE
  id = ?1`;

export type GetUserParams = {
  id: string;
};

export type GetUserRow = {
  id: string;
  screenName: string;
  displayName: string;
  bio: string | null;
  isActive: number | string;
  isProtected: number | string;
  avatarUrl: number | string | null;
};

type RawGetUserRow = {
  id: string;
  screen_name: string;
  display_name: string;
  bio: string | null;
  is_active: number | string;
  is_protected: number | string;
  avatar_url: number | string | null;
};

export async function getUser(
  d1: D1Database,
  args: GetUserParams,
): Promise<GetUserRow | null> {
  return await d1
    .prepare(getUserQuery)
    .bind(args.id)
    .first<RawGetUserRow | null>()
    .then((raw: RawGetUserRow | null) =>
      raw
        ? {
            id: raw.id,
            screenName: raw.screen_name,
            displayName: raw.display_name,
            bio: raw.bio,
            isActive: raw.is_active,
            isProtected: raw.is_protected,
            avatarUrl: raw.avatar_url,
          }
        : null,
    );
}

const getUserByScreenNameQuery = `-- name: GetUserByScreenName :one
SELECT
  user.id,
  user.screen_name,
  user.display_name,
  user.bio,
  user.is_active,
  user.is_protected,
  user.avatar_url
FROM
  user
WHERE
  screen_name = ?1`;

export type GetUserByScreenNameParams = {
  screenName: string;
};

export type GetUserByScreenNameRow = {
  id: string;
  screenName: string;
  displayName: string;
  bio: string | null;
  isActive: number | string;
  isProtected: number | string;
  avatarUrl: number | string | null;
};

type RawGetUserByScreenNameRow = {
  id: string;
  screen_name: string;
  display_name: string;
  bio: string | null;
  is_active: number | string;
  is_protected: number | string;
  avatar_url: number | string | null;
};

export async function getUserByScreenName(
  d1: D1Database,
  args: GetUserByScreenNameParams,
): Promise<GetUserByScreenNameRow | null> {
  return await d1
    .prepare(getUserByScreenNameQuery)
    .bind(args.screenName)
    .first<RawGetUserByScreenNameRow | null>()
    .then((raw: RawGetUserByScreenNameRow | null) =>
      raw
        ? {
            id: raw.id,
            screenName: raw.screen_name,
            displayName: raw.display_name,
            bio: raw.bio,
            isActive: raw.is_active,
            isProtected: raw.is_protected,
            avatarUrl: raw.avatar_url,
          }
        : null,
    );
}

const createUserQuery = `-- name: CreateUser :exec
INSERT INTO
  user(id, screen_name, display_name, password_hashed)
VALUES
  (
    ?1,
    ?2,
    ?3,
    ?4
  )`;

export type CreateUserParams = {
  id: string;
  screenName: string;
  displayName: string;
  passwordHashed: string;
};

export async function createUser(
  d1: D1Database,
  args: CreateUserParams,
): Promise<D1Result> {
  return await d1
    .prepare(createUserQuery)
    .bind(args.id, args.screenName, args.displayName, args.passwordHashed)
    .run();
}

const setSuppressUserQuery = `-- name: SetSuppressUser :exec
UPDATE user
SET
  is_active = ?1
WHERE
  id = ?2`;

export type SetSuppressUserParams = {
  active: number | string;
  id: string;
};

export async function setSuppressUser(
  d1: D1Database,
  args: SetSuppressUserParams,
): Promise<D1Result> {
  return await d1
    .prepare(setSuppressUserQuery)
    .bind(args.active, args.id)
    .run();
}

const setProtectUserQuery = `-- name: SetProtectUser :exec
UPDATE user
SET
  is_protected = ?1
WHERE
  id = ?2`;

export type SetProtectUserParams = {
  protected: number | string;
  id: string;
};

export async function setProtectUser(
  d1: D1Database,
  args: SetProtectUserParams,
): Promise<D1Result> {
  return await d1
    .prepare(setProtectUserQuery)
    .bind(args.protected, args.id)
    .run();
}

const editBioUserQuery = `-- name: EditBioUser :exec
UPDATE user
SET
  bio = ?1
WHERE
  id = ?2`;

export type EditBioUserParams = {
  bio: string | null;
  id: string;
};

export async function editBioUser(
  d1: D1Database,
  args: EditBioUserParams,
): Promise<D1Result> {
  return await d1.prepare(editBioUserQuery).bind(args.bio, args.id).run();
}
